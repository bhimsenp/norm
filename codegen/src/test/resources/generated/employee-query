package com.foo

import java.sql.PreparedStatement
import java.sql.ResultSet
import kotlin.Int
import kotlin.String
import norm.ParamSetter
import norm.Query
import norm.RowMapper

data class FooParams(
  val name: String?,
  val field: String?
)

class FooParamSetter : ParamSetter<FooParams> {
  override fun map(ps: PreparedStatement, params: FooParams) {
    ps.setObject(1, params.name)
    ps.setObject(2, params.field)
  }
}

data class FooResult(
  val id: Int,
  val firstName: String?,
  val lastName: String?
)

class FooRowMapper : RowMapper<FooResult> {
  override fun map(rs: ResultSet): FooResult = FooResult(
  id = rs.getObject("id") as kotlin.Int,
    firstName = rs.getObject("first_name") as kotlin.String?,
    lastName = rs.getObject("last_name") as kotlin.String?)
}

class FooQuery : Query<FooParams, FooResult> {
  override val sql: String = "select * from employees where first_name = ? order by ?"

  override val mapper: RowMapper<FooResult> = FooRowMapper()

  override val paramSetter: ParamSetter<FooParams> = FooParamSetter()
}
